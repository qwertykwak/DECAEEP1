MOV R0, #12
MOV R1, #5 
MOV R3, #0
MOV R2, R1 // initializing op1 (R0), op2 (R1), sum (R3) and op2_shifted (R2)
CMP R0, #1 // check whether R0 = 0x0
JCC 9 // end the loop if R0 = 0x0
MOV R4, R0 
AND R4, #1 // filter out LSB of R0
CMP R4, #1 // check whether LSB of R0 = 1
JCC 2 // skip addition if LSB of R0 = 0 (equivalent to adding 0 * R1)
ADD R3, R3, R2 // add op2_shifted to sum
LSL R2, R2, #1 // multiply R1 by 2
LSR R0, R0, #1 // make second LSB of R0 to first LSB (choosing next higher bit of R0)
JMP -9 // jump back to CMP R0, #1

